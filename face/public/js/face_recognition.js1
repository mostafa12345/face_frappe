frappe.pages['face'].on_page_load = function (wrapper) {
    let page = frappe.ui.make_app_page({
        parent: wrapper,
        title: 'Face Recognition',
        single_column: true
    });

    // Add a placeholder for the camera and buttons
    $(page.body).append(`
        <div style="text-align: center; margin-top: 20px;" id="camera-section">
            <!-- Dynamic camera content added here -->
        </div>
    `);

    // Add "Register Face" Button
    page.add_menu_item('Register Face', () => {
        frappe.prompt(
            [
                {
                    fieldname: 'employee_full_name',
                    label: 'Full Name',
                    fieldtype: 'Data',
                    reqd: 1,
                    description: "Enter the full name of the employee to register their face."
                }
            ],
            (values) => {
                $('#camera-section').html(`
                    <video id="camera-stream" autoplay playsinline style="width: 100%; max-width: 640px;"></video>
                    <canvas id="capture-canvas" style="display: none;"></canvas>
                    <br>
                    <button id="capture-btn" class="btn btn-primary" style="margin-top: 20px;">Capture</button>
                `);

                const video = document.getElementById('camera-stream');
                const canvas = document.getElementById('capture-canvas');
                const captureBtn = document.getElementById('capture-btn');

                // Access the camera
                navigator.mediaDevices
                    .getUserMedia({ video: true })
                    .then((stream) => {
                        video.srcObject = stream;
                    })
                    .catch((err) => {
                        frappe.msgprint(`Error accessing camera: ${err.message}`);
                    });

                // Capture image on button click
                captureBtn.addEventListener('click', () => {
                    const context = canvas.getContext('2d');
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    context.drawImage(video, 0, 0, canvas.width, canvas.height);

                    const imageData = canvas.toDataURL('image/png');

                    // Stop the camera
                    const stream = video.srcObject;
                    stream.getTracks().forEach((track) => track.stop());
                    video.srcObject = null;

                    // Call the backend to register the face
                    frappe.call({
                        method: 'face.api.register_face',
                        args: {
                            employee_full_name: values.employee_full_name,
                            image_data: imageData
                        },
                        callback: (response) => {
                            frappe.msgprint(response.message || 'Face registered successfully.');
                        }
                    });
                });
            },
            'Register Face',
            'Submit'
        );
    });

    // Add "Check In/Out" Button
    page.add_menu_item('Check In/Out', () => {
        $('#camera-section').html(`
            <video id="camera-stream" autoplay playsinline style="width: 100%; max-width: 640px;"></video>
            <canvas id="capture-canvas" style="display: none;"></canvas>
        `);

        const video = document.getElementById('camera-stream');
        const canvas = document.getElementById('capture-canvas');

        // Access the camera
        navigator.mediaDevices
            .getUserMedia({ video: true })
            .then((stream) => {
                video.srcObject = stream;

                // Automatically capture the image after a short delay
                setTimeout(() => {
                    captureImage(video, canvas);
                }, 3000); // 3-second delay for auto-capture
            })
            .catch((err) => {
                frappe.msgprint(`Error accessing camera: ${err.message}`);
            });
    });

    // Function to capture image from the video stream
    function captureImage(video, canvas) {
        const context = canvas.getContext('2d');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        context.drawImage(video, 0, 0, canvas.width, canvas.height);

        const imageData = canvas.toDataURL('image/png');

        // Stop the camera
        const stream = video.srcObject;
        stream.getTracks().forEach((track) => track.stop());
        video.srcObject = null;

        // Send the captured image to the backend
        frappe.call({
            method: 'face.api.clock_in_out',
            args: {
                image_data: imageData
            },
            callback: (response) => {
                if (response.status === 'success') {
                    // Success: Display a success message with the name and action
                    frappe.msgprint(response.message);
                } else {
                    // Error or restriction: Display the error message
                    frappe.msgprint(response.message, 'Error');
                }
            },
            error: (err) => {
                frappe.msgprint(`An unexpected error occurred: ${err.message}`, 'Error');
            }
        });
    }
};

